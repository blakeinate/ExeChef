Brief requirements:
  need MongoDB installed on system
  need python 2.7 installed
    pip installation recommended to aid in installing
     of package requirements from requirements.txt
  after installation of python, you can install all packages needed
   using the following command "pip install -r requirements.txt"

accounts database structure
{
    'username': 'blakeb',
    'password': 'mypassword',
    'email': 'blakeb@gmail.com',
    'favorites': ['someid', 'someid'],
    'created' : ['someid', 'someid']
}

recipes database structure
{
    "name" : "cool recipe",
    "image_name": "securefilename.jpeg",
    "tags": ["food", "Mexican"],
    "steps" : ["heat oven", "put food in", "eat the food"],
    "author" : "blakeb",
    "description" : "this is the best meal you will ever eat",
    "private" : "True",
    "ingredients" : [{
      "name": "Chicken Broth",
      "amount": "1/2",
      "unit": "Cups"
    }],
    "created_date" : datetime,
    "modified_date" : datetime
}

blacklist database structure (front end should never need to touch this)
{
    "token": "jwt_token_string"
}

ENDPOINTS
---------------------------------------------------------------
create account
A POST request to the /CreateAccount should be made.
Returns:
{
  "data": {
    "user": {
      "_id": {
        "$oid": "5a80e397485b9265f90852db"
      },
      "created": [
        "5a8620a0485b9238269cddfc",
        "5a862149485b9238269cddfd"
      ],
      "favorites": [],
      "password": "datboi",
      "username": "moosey"
    }
  }
}

Requires: username, email and password in the following format
  {
    "username":"somename",
    "email": "somename@email.com",
    "password": "mypassword"
  }
Alternate returns:
  if username is taken, returns:
    422, {'message':'The username provided is already in use.'}
  if email taken:
    422, {'message':'The email provided is already in use.'}
  if no account name provided:
    422, {'message':'The provided username is invalid.'}
  if no email provided:
    422, {'message':'The provided email is invalid.'}
  if no password provided:
    422, {'message':'The provided username is invalid.'}


---------------------------------------------------------------

Login to account
A POST request to /Login should be made.
Returns: if provided password correct
{
  "data": {
    "user": {
      "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIzMTRhOWUwZC1kMGE0LTQ2ZWEtOTZiMy1lMTU3ZGVjY2Y5NzIiLCJleHAiOjE1MTk4NjU5NTksImZyZXNoIjpmYWxzZSwiaWF0IjoxNTE5ODY1MDU5LCJ0eXBlIjoiYWNjZXNzIiwibmJmIjoxNTE5ODY1MDU5LCJpZGVudGl0eSI6Im1vb3NleSJ9.qTT-bCVTC07Epe87KoJyvWq5RNKowRgy0PFL1nUKGZA",
      "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlNDI2Njg2ZC05MjU2LTRhYmYtOGFjMi1lMzBjNzZkOTIwOGUiLCJleHAiOjE1MjI0NTcwNTksImlhdCI6MTUxOTg2NTA1OSwidHlwZSI6InJlZnJlc2giLCJuYmYiOjE1MTk4NjUwNTksImlkZW50aXR5IjoibW9vc2V5In0.tHXR6Ebf9AwkXoNj4WRMNjuN6NfGdqDkkQN7xX6AzNk"
      "_id": {
        "$oid": "5a80e397485b9265f90852db"
      },
      "created": [
        "5a8620a0485b9238269cddfc",
        "5a862149485b9238269cddfd"
      ],
      "favorites": [],
      "password": "datboi",
      "username": "moosey"
    },
  }
}
Requires: username or email and password in the following format
  {
    "login":"somename (or someemail@gmail.com)",
    "password": "mypassword"
  }

Alternate returns:
  if password incorrect, returns:
    422, {'message': 'The current password does not match the password provided.'}
  if username/email does not exist, returns:
    422, {'message':'The username/email provided is not associated with an active account.'}
  if no username/email provided:
    422, {'message':'Please provide a valid username/email.'}



---------------------------------------------------------------

refresh access token
A POST request to /Refresh should be made.
Returns: if provided JWT refresh token provided:
  {
    'data':{
        "access_token": "<token here>"
    }
  }

Requires: JWT Header in the following format:
  "Authorization: Bearer <refresh token here>"


Alternate returns:
  if JWT refresh token has been revoked:
    {"msg": "Token has been revoked"}
  if any other error occurs, returns:
    500, {'message': some exception text}


---------------------------------------------------------------

Logout of account (revokes/blacklists JWT access token)
A DELETE request to /Logout should be made.
Returns: if provided JWT access token provided and blacklisting success:
  200

Requires: JWT Header in the following format:
  "Authorization: Bearer <JWT access token here>"


Alternate returns:
  if no access token provided:
    {
    "description": "Request does not contain an access token",
    "error": "Authorization Required",
    "status_code": 401
    }
  if blacklisting failed:
    500, {'Unable to communicate with database.'}



---------------------------------------------------------------

Logout of account 2 (revokes/blacklists JWT refresh token, usually want to use this too)
A DELETE request to /Logout2 should be made.
Returns: if provided JWT refresh token provided and blacklisting success:
  200

Requires: JWT Header in the following format:
  "Authorization: Bearer <refresh token here>"


Alternate returns:
  if JWT refresh token has been revoked:
    {"msg": "Token has been revoked"}
  if blacklisting failed:
    500, {'Unable to communicate with database.'}


---------------------------------------------------------------


get all users
(this will be removed in final version, or made for only admin if implemented)
A GET request to the /Users should be made.
Returns:
  {
    'data':{
        "users": [
          {
            "_id": {
              "$oid": "5a7cc9db485b921fc97aff9e"
            },
            "created": [],
            "favorites": [],
            "password": "meepmeep",
            "username": "blakeb"
          },
          {
            "_id": {
              "$oid": "5a7cd05b485b9238e018e273"
            },
            "created": [],
            "favorites": [],
            "password": "somepass",
            "username": "derper"
          },
          {
            "_id": {
              "$oid": "5a7ce0e5485b9264f0ad8496"
            },
            "created": [],
            "favorites": [],
            "password": "mypassword",
            "username": "somename"
          }
        ]
    }
  }


  ---------------------------------------------------------------


get current user
A GET request to the /User should be made.
Returns: if valid JWT:
  {
    'data':{
        "user": {
          "_id": {
            "$oid": "5a7cc9db485b921fc97aff9e"
          },
          "created": [],
          "favorites": [],
          "password": "meepmeep",
          "username": "blakeb"
        }
    }
  }
Requires: JWT Header in the following format:
  "Authorization: Bearer <access token here>"

Alternate returns:
  if no access token provided:
    {
    "description": "Request does not contain an access token",
    "error": "Authorization Required",
    "status_code": 401
    }
  if cannot find account for the access token:
  if blacklisting failed:
    400, {'message':'No user found associated with provided access token.'}


---------------------------------------------------------------


create a recipe
A POST request to the /CreateRecipe should be made.
Returns: recipe id in the following format:
  {
    'data':{
      "id": "5a7ce708485b9274f77a215a"
    }
  }
Requires: recipe information in the following format:
          (note: author added from username associated with JWT)
  {
    "name": "good recipe",
    "tags": ["food"],
    "steps" : ["do cool stuff", "do more cool stuff", "eat it!"],
    "description": "this is the best ting you will ever eat",
    "private": "True",
    "ingredients": [{"name":"goodgood", "amount":"tree-fitty", "unit":"pounds"}]
  }
  OPTIONAL:
    passing a file "file" with the json will upload it as an image associated
    with the recipe


  Header in the following format:
    "Authorization: Bearer <access token here>"

Alternate returns:
  if no access token provided:
    {
    "description": "Request does not contain an access token",
    "error": "Authorization Required",
    "status_code": 401
    }
  if missing fields:
    422, {'message':'Some required fields were not provided.'}



---------------------------------------------------------------


update a recipe
A POST request to the /UpdateRecipe should be made.
Returns:
  200
Requires: recipe information in the following format (fields besides id can be missing, only updates fields provided):

  {
    "id" : "5a7ce708485b9274f77a215a",
    "steps" : ["do cool stuff", "do more cool stuff", "eat it!"],
    "description": "this is the best ting you will ever eat",
    "private": "True",
    "ingredients": [{"name":"goodgood", "amount":"tree-fitty", "unit":"pounds"}]
  }


  Header in the following format:
    "Authorization: Bearer <access token here>"

Alternate returns:
  if no access token provided:
    {
    "description": "Request does not contain an access token",
    "error": "Authorization Required",
    "status_code": 401
    }
  if update was not successful:
    500, {'message':'Unable to communicate with database and/or recipe modification failed.'}

---------------------------------------------------------------


get all recipes
A GET request to the /Recipes should be made.
Returns: list of recipes in the following format:
  {
    'data':{
        "recipes": [
          {
            "_id": {
              "$oid": "5a7cdade485b925737ef6ef5"
            },
            "author": "BlakeB",
            "tags": ["food"],
            "image_name": "securefilename.jpeg",
            "created_date": {
              "$date": 1518110334999
            },
            "description": "this is the best ting you will ever eat",
            "ingredients": [
              {
                "amount": "tree-fitty",
                "name": "dank",
                "unit": "pounds"
              }
            ],
            "modified_date": {
              "$date": 1518110334999
            },
            "name": "dank recipe",
            "private": "True",
            "steps": [
              "do cool stuff",
              "do more cool stuff",
              "eat that shit"
            ]
          }
        ]
    }
  }


---------------------------------------------------------------


get a single recipe
A GET request to the /Recipes/<recipe_id> should be made.
Returns: a recipe in the following format:
  {
    'data':{
        "recipe": {
          "_id": {
            "$oid": "5a7cdade485b925737ef6ef5"
          },
          "author": "BlakeB",
          "tags": ["food"],
          "image_name": "securefilename.jpeg",
          "created_date": {
            "$date": 1518110334999
          },
          "description": "this is the best ting you will ever eat",
          "ingredients": [
            {
              "amount": "tree-fitty",
              "name": "dank",
              "unit": "pounds"
            }
          ],
          "modified_date": {
            "$date": 1518110334999
          },
          "name": "dank recipe",
          "private": "True",
          "steps": [
            "do cool stuff",
            "do more cool stuff",
            "eat that shit"
          ]
        }
    }
  }
Requires: a recipe_id to be passed at the end of the route
Alternate returns:
  if id is incorrect:
    400, {'message':'No recipe found with the provided recipe ID.'}
  if recipe is private and author does not match current user:
    403, {'message':'Private recipe is owned by another user.'}


---------------------------------------------------------------

get users created recipes
A GET request to the /UserRecipes should be made.
Returns: list of recipes in the following format:
  {
    'data':{
        "recipes": [
          {
            "_id": {
              "$oid": "5a7cdade485b925737ef6ef5"
            },
            "author": "BlakeB",
            "tags": ["food"],
            "created_date": {
              "$date": 1518110334999
            },
            "description": "this is the best ting you will ever eat",
            "ingredients": [
              {
                "amount": "tree-fitty",
                "name": "dank",
                "unit": "pounds"
              }
            ],
            "modified_date": {
              "$date": 1518110334999
            },
            "name": "dank recipe",
            "private": "True",
            "steps": [
              "do cool stuff",
              "do more cool stuff",
              "eat that shit"
            ]
          }
        ]
    }
  }

Requires: JWT Header in the following format:
  "Authorization: Bearer <access token here>"

Alternate returns:
  if no access token provided:
    {
    "description": "Request does not contain an access token",
    "error": "Authorization Required",
    "status_code": 401
    }
  if access token does not relate to active user:
    400, {'message':'No user found associated with provided access token.'}

---------------------------------------------------------------

get users favorite recipes
A GET request to the /Favorites should be made.
Returns: list of recipes in the following format:
  {
    'data':{
        "recipes": [
          {
            "_id": {
              "$oid": "5a7cdade485b925737ef6ef5"
            },
            "author": "BlakeB",
            "tags": ["food"],
            "created_date": {
              "$date": 1518110334999
            },
            "description": "this is the best ting you will ever eat",
            "ingredients": [
              {
                "amount": "tree-fitty",
                "name": "dank",
                "unit": "pounds"
              }
            ],
            "modified_date": {
              "$date": 1518110334999
            },
            "name": "dank recipe",
            "private": "True",
            "steps": [
              "do cool stuff",
              "do more cool stuff",
              "eat that shit"
            ]
          }
        ]
    }
  }

Requires: JWT Header in the following format:
  "Authorization: Bearer <token here>"

Alternate returns:
  if no access token provided:
    {
    "description": "Request does not contain an access token",
    "error": "Authorization Required",
    "status_code": 401
    }
  if access token does not relate to active user:
    400, {'message':'No user found associated with provided access token.'}




---------------------------------------------------------------


delete a recipe
A POST request to the /DeleteRecipe/<recipe_id> should be made.
Returns:
  {
    "deleted": True
  }
Requires: The JWT token provided is associated with the account that owns the recipe.



  Header in the following format:
    "Authorization: Bearer <token here>"

Alternate returns:
  if no access token provided:
    {
    "description": "Request does not contain an access token",
    "error": "Authorization Required",
    "status_code": 401
    }
  if delete was not successful:
    500, {'message':'Unable to communicate with database and/or recipe modification failed.'}
  if user not owner of the recipe:
    403, {'message':'Recipe is owned by another user. Modifications are not allowed.'}


---------------------------------------------------------------


retrieve recipes by tag
A GET request to the /SearchTags/<tag_str> should be made.
Returns: a list of recipes containing any of the searched tags in the following format:
{
    'data':{
        "recipes": [
          {
            "_id": {
              "$oid": "5a7cdade485b925737ef6ef5"
            },
            "author": "BlakeB",
            "tags": ["food"],
            "created_date": {
              "$date": 1518110334999
            },
            "description": "this is the best ting you will ever eat",
            "ingredients": [
              {
                "amount": "tree-fitty",
                "name": "dank",
                "unit": "pounds"
              }
            ],
            "modified_date": {
              "$date": 1518110334999
            },
            "name": "dank recipe",
            "private": "True",
            "steps": [
              "do cool stuff",
              "do more cool stuff",
              "eat that shit"
            ]
          }
        ]
    }
}
Requires: a tag_string to be passed at the end of the route
    The tag string should be a list of tags separated by commas ","
